name: Run Proxy Tests and Upload Results

on:
  schedule:
    - cron: '0 */6 * * *'  # هر ۶ ساعت یکبار
  workflow_dispatch:  # امکان اجرای دستی

jobs:
  test-proxies:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pysocks tqdm psutil

    - name: Download Xray-core for Linux
      run: |
        wget -q --show-progress -O xray.zip https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip
        rm -f xray LICENSE geoip.dat geosite.dat README.md || true
        unzip -o xray.zip
        chmod +x xray
        sudo mv xray /usr/local/bin/
        echo "✅ Xray-core installed successfully"

    - name: Create necessary directories
      run: |
        mkdir -p data/raw data/working_json data/working_url log
        mkdir -p main/v2ray_config_collector/data/unique/protocols
        mkdir -p main/data/working_json main/data/working_url main/log
        mkdir -p reports
        
        echo "📁 Directory structure created"

    - name: Run v2ray config collector
      run: |
        cd main/v2ray_config_collector
        python main.py
        echo "✅ Config collection completed"

    - name: Check generated config files
      run: |
        echo "📋 Generated config files:"
        ls -la main/v2ray_config_collector/data/unique/protocols/
        
        # بررسی وجود فایل‌های ضروری
        if [ ! -f "main/v2ray_config_collector/data/unique/protocols/shadowsocks_configs.json" ]; then
          echo "❌ shadowsocks config file not found!"
          exit 1
        fi
        
        echo "📊 File sizes:"
        wc -c main/v2ray_config_collector/data/unique/protocols/*.json || echo "No JSON files found"

    - name: Setup correct file paths for tester
      run: |
        echo "🔧 Setting up correct file paths..."
        
        # کپی فایل‌های config به مسیر صحیح که tester.py انتظار دارد
        # بر اساس کد Python، مسیرهای پیش‌فرض این‌ها هستند:
        # '../v2ray_config_collector/data/unique/protocols/shadowsocks_configs.json'
        # '../v2ray_config_collector/data/unique/protocols/vmess_configs.json'
        # '../v2ray_config_collector/data/unique/protocols/vless_configs.json'
        
        cd main/module
        
        # بررسی مسیرهای پیش‌فرض که در tester.py تعریف شده
        if [ -f "../v2ray_config_collector/data/unique/protocols/shadowsocks_configs.json" ]; then
          echo "✅ Found shadowsocks config at expected path"
          SS_FILE="../v2ray_config_collector/data/unique/protocols/shadowsocks_configs.json"
        else
          echo "❌ shadowsocks config not found at expected path!"
          echo "📁 Current directory: $(pwd)"
          echo "🔍 Looking for config files:"
          find ../.. -name "shadowsocks_configs.json" -type f 2>/dev/null || echo "No shadowsocks files found anywhere"
          exit 1
        fi
        
        if [ -f "../v2ray_config_collector/data/unique/protocols/vmess_configs.json" ]; then
          echo "✅ Found vmess config at expected path"
          VMESS_FILE="../v2ray_config_collector/data/unique/protocols/vmess_configs.json"
        else
          echo "⚠️ vmess config not found at expected path"
          VMESS_FILE=""
        fi
        
        if [ -f "../v2ray_config_collector/data/unique/protocols/vless_configs.json" ]; then
          echo "✅ Found vless config at expected path"
          VLESS_FILE="../v2ray_config_collector/data/unique/protocols/vless_configs.json"
        else
          echo "⚠️ vless config not found at expected path"
          VLESS_FILE=""
        fi
        
        # ذخیره متغیرها برای مرحله بعدی
        echo "SS_FILE=$SS_FILE" >> $GITHUB_ENV
        echo "VMESS_FILE=$VMESS_FILE" >> $GITHUB_ENV  
        echo "VLESS_FILE=$VLESS_FILE" >> $GITHUB_ENV
        
        # ایجاد دایرکتوری‌های لازم برای خروجی
        mkdir -p ../data/working_json ../data/working_url ../log

    - name: Run Shadowsocks tests
      run: |
        cd main/module
        if [ -n "$SS_FILE" ] && [ -f "$SS_FILE" ]; then
          echo "🧪 Testing Shadowsocks configurations..."
          echo "📄 Config file: $SS_FILE"
          echo "📊 Config count: $(jq '.configs | length' "$SS_FILE" 2>/dev/null || echo "Unable to count")"
          
          python tester.py \
            --shadowsocks "$SS_FILE" \
            --xray-path /usr/local/bin/xray \
            --workers 200 \
            --timeout 10 \
            --batch-size 500
          
          echo "✅ Shadowsocks tests completed"
        else
          echo "❌ Shadowsocks config file not available: $SS_FILE"
          exit 1
        fi

    - name: Run VMess tests
      run: |
        cd main/module
        if [ -n "$VMESS_FILE" ] && [ -f "$VMESS_FILE" ]; then
          echo "🧪 Testing VMess configurations..."
          echo "📄 Config file: $VMESS_FILE"
          echo "📊 Config count: $(jq '.configs | length' "$VMESS_FILE" 2>/dev/null || echo "Unable to count")"
          
          python tester.py \
            --vmess "$VMESS_FILE" \
            --xray-path /usr/local/bin/xray \
            --workers 200 \
            --timeout 10 \
            --batch-size 500
            
          echo "✅ VMess tests completed"
        else
          echo "⚠️ Skipping VMess tests - config file not available: $VMESS_FILE"
        fi

    - name: Run VLESS tests
      run: |
        cd main/module
        if [ -n "$VLESS_FILE" ] && [ -f "$VLESS_FILE" ]; then
          echo "🧪 Testing VLESS configurations..."
          echo "📄 Config file: $VLESS_FILE"
          echo "📊 Config count: $(jq '.configs | length' "$VLESS_FILE" 2>/dev/null || echo "Unable to count")"
          
          python tester.py \
            --vless "$VLESS_FILE" \
            --xray-path /usr/local/bin/xray \
            --workers 200 \
            --timeout 10 \
            --batch-size 500
            
          echo "✅ VLESS tests completed"
        else
          echo "⚠️ Skipping VLESS tests - config file not available: $VLESS_FILE"
        fi

    - name: Copy results to root directories
      run: |
        echo "📋 Copying test results to root directories..."
        
        # کپی نتایج از main/data به root/data
        if [ -d "main/data/working_json" ]; then
          cp -r main/data/working_json/* data/working_json/ 2>/dev/null || echo "No working_json files to copy"
        fi
        
        if [ -d "main/data/working_url" ]; then
          cp -r main/data/working_url/* data/working_url/ 2>/dev/null || echo "No working_url files to copy"  
        fi
        
        if [ -d "main/log" ]; then
          cp -r main/log/* log/ 2>/dev/null || echo "No log files to copy"
        fi
        
        echo "📊 Results summary:"
        echo "Working JSON files:"
        ls -la data/working_json/ 2>/dev/null || echo "No JSON results"
        echo "Working URL files:"
        ls -la data/working_url/ 2>/dev/null || echo "No URL results"
        echo "Log files:"
        ls -la log/ 2>/dev/null || echo "No log files"

    - name: Generate test report
      run: |
        echo "📊 Generating test report..."
        
        # شمارش کانفیگ‌های موفق از فایل‌های JSON
        WORKING_SS=0
        WORKING_VLESS=0  
        WORKING_VMESS=0
        
        if [ -f "data/working_json/working_shadowsocks.txt" ]; then
          WORKING_SS=$(grep -c '"protocol": "shadowsocks"' data/working_json/working_shadowsocks.txt 2>/dev/null || echo "0")
        fi
        
        if [ -f "data/working_json/working_vless.txt" ]; then
          WORKING_VLESS=$(grep -c '"protocol": "vless"' data/working_json/working_vless.txt 2>/dev/null || echo "0")  
        fi
        
        if [ -f "data/working_json/working_vmess.txt" ]; then
          WORKING_VMESS=$(grep -c '"protocol": "vmess"' data/working_json/working_vmess.txt 2>/dev/null || echo "0")
        fi
        
        TOTAL_WORKING=$((WORKING_SS + WORKING_VLESS + WORKING_VMESS))
        
        # ذخیره متغیرها برای steps بعدی
        echo "WORKING_SS=$WORKING_SS" >> $GITHUB_ENV
        echo "WORKING_VLESS=$WORKING_VLESS" >> $GITHUB_ENV  
        echo "WORKING_VMESS=$WORKING_VMESS" >> $GITHUB_ENV
        echo "TOTAL_WORKING=$TOTAL_WORKING" >> $GITHUB_ENV
        
        cat > reports/test_summary.md << EOF
        # Proxy Test Results
        **Date**: $(date +'%Y-%m-%d %H:%M:%S UTC')
        
        ## Working Configurations
        - Shadowsocks: $WORKING_SS
        - VLESS: $WORKING_VLESS  
        - VMess: $WORKING_VMESS
        
        ## Total Working: $TOTAL_WORKING
        
        ## Test Details
        - Last run: $(date)
        - Workflow: ${{ github.workflow }}
        - Run ID: ${{ github.run_id }}
        - Commit: ${{ github.sha }}
        
        ## File Structure
        \`\`\`
        $(find data/ -type f 2>/dev/null | head -20)
        \`\`\`
        
        ## Log Summary
        \`\`\`
        $(tail -20 log/proxy_tester.log 2>/dev/null || echo "No logs available")
        \`\`\`
        EOF
        
        echo "✅ Test report generated with $TOTAL_WORKING working configs"

    - name: Configure git for push
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git config --global pull.rebase true

    - name: Pull latest changes before push
      run: |
        git pull https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git main --rebase --autostash || echo "Pull failed, continuing..."

    - name: Commit and push results
      run: |
        # اضافه کردن فایل‌ها به git
        git add data/working_json/* data/working_url/* log/* reports/* 2>/dev/null || true
        git add main/v2ray_config_collector/data/unique/protocols/* 2>/dev/null || true
        
        if git diff --staged --quiet; then
          echo "🤷‍♂️ No changes to commit"
        else
          git commit -m "Auto-update: Test results ($TOTAL_WORKING working configs) - $(date +'%Y-%m-%d %H:%M UTC')"
          
          # تلاش برای push با retry
          for i in {1..3}; do
            echo "🔄 Attempting push (try $i/3)..."
            if git push https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git main; then
              echo "✅ Push successful"
              break
            else
              echo "❌ Push failed, retrying in 5 seconds..."
              sleep 5
            fi
          done
        fi

    - name: Send notification on success
      if: success()
      run: |
        echo "✅ Proxy tests completed successfully!"
        echo "Working configurations:"
        echo "- Shadowsocks: $WORKING_SS"
        echo "- VLESS: $WORKING_VLESS"  
        echo "- VMess: $WORKING_VMESS"
        echo "- Total: $TOTAL_WORKING"

    - name: Send notification on failure  
      if: failure()
      run: |
        echo "❌ Proxy tests failed!"
        echo "Please check the workflow logs for details."
        echo "Current directory contents:"
        ls -la
        echo "Config file locations:"
        find . -name "*_configs.json" -type f 2>/dev/null || echo "No config files found"
