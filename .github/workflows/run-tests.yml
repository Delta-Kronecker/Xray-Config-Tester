name: Run Proxy Tests and Upload Results

on:
  schedule:
    - cron: '0 */6 * * *'  # هر ۶ ساعت یکبار
  workflow_dispatch:  # امکان اجرای دستی

jobs:
  test-proxies:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pysocks tqdm psutil

    - name: Download Xray-core for Linux
      run: |
        wget -q --show-progress -O xray.zip https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip
        rm -f xray LICENSE geoip.dat geosite.dat README.md || true
        unzip -o xray.zip
        chmod +x xray
        sudo mv xray /usr/local/bin/
        echo "✅ Xray-core installed successfully"

    - name: Create necessary directories
      run: |
        mkdir -p data/raw data/working_json data/working_url log
        mkdir -p main/v2ray_config_collector/data/unique/protocols
        mkdir -p main/module/../data/working_json main/module/../data/working_url main/module/../log
        mkdir -p reports
        
        echo "📁 Directory structure created"
        echo "Data directories:"
        ls -la data/
        echo "Main module directories:"
        ls -la main/module/../

    - name: Run v2ray config collector
      run: |
        cd main/v2ray_config_collector
        python main.py
        echo "✅ Config collection completed"

    - name: Check generated config files
      run: |
        echo "Generated config files:"
        ls -la main/v2ray_config_collector/data/unique/protocols/
        
        if [ ! -f "main/v2ray_config_collector/data/unique/protocols/shadowsocks_configs.json" ]; then
          echo "❌ shadowsocks config file not found!"
          exit 1
        fi
        if [ ! -f "main/v2ray_config_collector/data/unique/protocols/vless_configs.json" ]; then
          echo "❌ vless config file not found!"
          exit 1
        fi

    - name: Copy config files to root data directory
      run: |
        mkdir -p data/raw data/working_json data/working_url log
        
        echo "📋 Copying config files..."
        
        if [ -f "main/v2ray_config_collector/data/unique/protocols/shadowsocks_configs.json" ]; then
          cp main/v2ray_config_collector/data/unique/protocols/shadowsocks_configs.json data/raw/
          echo "✅ Copied shadowsocks config"
        else
          echo "❌ shadowsocks config not found in collector output!"
          ls -la main/v2ray_config_collector/data/unique/protocols/ || echo "Protocols directory not found"
        fi
        
        if [ -f "main/v2ray_config_collector/data/unique/protocols/vless_configs.json" ]; then
          cp main/v2ray_config_collector/data/unique/protocols/vless_configs.json data/raw/
          echo "✅ Copied vless config"
        else
          echo "❌ vless config not found in collector output!"
        fi
        
        if [ -f "main/v2ray_config_collector/data/unique/protocols/vmess_configs.json" ]; then
          cp main/v2ray_config_collector/data/unique/protocols/vmess_configs.json data/raw/
          echo "✅ Copied vmess config"
        else
          echo "⚠️ vmess config not found (optional)"
        fi
        
        echo "📊 Final data directory contents:"
        ls -la data/raw/

    - name: Run the tests from root directory
      run: |
        echo "📁 Current directory structure:"
        pwd
        ls -la
        echo "📁 Main directory:"
        ls -la main/
        echo "📁 Module directory:"
        ls -la main/module/
        echo "📁 Data directory:"
        ls -la data/raw/
        
        cd main/module
        
        echo "🔍 Checking config file paths..."
        if [ -f "../../../../data/raw/shadowsocks_configs.json" ]; then
          SS_PATH="../../../../data/raw/shadowsocks_configs.json"
        elif [ -f "../../../data/raw/shadowsocks_configs.json" ]; then
          SS_PATH="../../../data/raw/shadowsocks_configs.json"
        else
          echo "❌ shadowsocks config file not found in any expected location!"
          find ../../.. -name "shadowsocks_configs.json" -type f 2>/dev/null || echo "No shadowsocks files found"
          exit 1
        fi
        
        if [ -f "../../../../data/raw/vless_configs.json" ]; then
          VLESS_PATH="../../../../data/raw/vless_configs.json"
        elif [ -f "../../../data/raw/vless_configs.json" ]; then
          VLESS_PATH="../../../data/raw/vless_configs.json"
        else
          echo "❌ vless config file not found in any expected location!"
          find ../../.. -name "vless_configs.json" -type f 2>/dev/null || echo "No vless files found"
          exit 1
        fi
        
        echo "📁 Creating required directories for incremental save..."
        mkdir -p ../../../../data/working_json ../../../../data/working_url ../../../../log
        mkdir -p ../data/working_json ../data/working_url ../log
        
        echo "🧪 Testing Shadowsocks configurations..."
        python tester.py --shadowsocks "$SS_PATH" --xray-path /usr/local/bin/xray --workers 200 --timeout 10
        
        echo "🧪 Testing VLESS configurations..."
        python tester.py --vless "$VLESS_PATH" --xray-path /usr/local/bin/xray --workers 200 --timeout 10
        
        VMESS_PATH=""
        if [ -f "../../../../data/raw/vmess_configs.json" ]; then
          VMESS_PATH="../../../../data/raw/vmess_configs.json"
        elif [ -f "../../../data/raw/vmess_configs.json" ]; then
          VMESS_PATH="../../../data/raw/vmess_configs.json"
        fi
        
        if [ -n "$VMESS_PATH" ]; then
          echo "🧪 Testing VMess configurations..."
          python tester.py --vmess "$VMESS_PATH" --xray-path /usr/local/bin/xray --workers 200 --timeout 10
        else
          echo "⚠️ Skipping VMess tests - config file not found"
          find ../../.. -name "vmess_configs.json" -type f 2>/dev/null || echo "No vmess files found"
        fi

    - name: Generate test report
      run: |
        echo "📊 Generating test report..."
        
        WORKING_SS=$(find data/working_json -name "*shadowsocks*" -exec grep -c '"protocol": "shadowsocks"' {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}') || WORKING_SS=0
        WORKING_VLESS=$(find data/working_json -name "*vless*" -exec grep -c '"protocol": "vless"' {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}') || WORKING_VLESS=0
        WORKING_VMESS=$(find data/working_json -name "*vmess*" -exec grep -c '"protocol": "vmess"' {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}') || WORKING_VMESS=0
        
        cat > reports/test_summary.md << EOF
        # Proxy Test Results
        **Date**: $(date +'%Y-%m-%d %H:%M:%S')
        
        ## Working Configurations
        - Shadowsocks: $WORKING_SS
        - VLESS: $WORKING_VLESS
        - VMess: $WORKING_VMESS
        
        ## Total Working: $((WORKING_SS + WORKING_VLESS + WORKING_VMESS))
        
        ## Test Details
        Last run: $(date)
        Workflow: ${{ github.workflow }}
        Run ID: ${{ github.run_id }}
        
        ### Directory Structure
        \`\`\`
        $(find data/ -type f -name "*.json" -o -name "*.txt" | head -20)
        \`\`\`
        EOF
        
        echo "✅ Test report generated"

    - name: Configure git for push
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git config --global pull.rebase true

    - name: Pull latest changes before push
      run: |
        git pull https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git main --rebase --autostash || echo "Pull failed, continuing..."

    - name: Commit and push results
      run: |
        git add data/raw/* data/working_json/* data/working_url/* log/* reports/*
        git add main/v2ray_config_collector/data/unique/protocols/*
        
        if git diff --staged --quiet; then
          echo "🤷‍♂️ No changes to commit"
        else
          git commit -m "Auto-update: Test results - $(date +'%Y-%m-%d %H:%M')"
          
          for i in {1..3}; do
            echo "🔄 Attempting push (try $i/3)..."
            git push https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git main && break
            sleep 5
          done
        fi

    - name: Send notification on success
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          const workingSS = parseInt('$WORKING_SS') || 0;
          const workingVLESS = parseInt('$WORKING_VLESS') || 0;
          const workingVMESS = parseInt('$WORKING_VMESS') || 0;
          const total = workingSS + workingVLESS + workingVMESS;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `✅ Proxy tests completed successfully!\n\nWorking configurations:\n- Shadowsocks: ${workingSS}\n- VLESS: ${workingVLESS}\n- VMess: ${workingVMESS}\n- Total: ${total}\n\nView results in the latest commit.`
          });

    - name: Send notification on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '❌ Proxy tests failed! Please check the workflow logs for details.'
          });
