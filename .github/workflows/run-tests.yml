name: Run Proxy Tests and Upload Results

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  test-proxies:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pysocks tqdm psutil jq
    
    - name: Install Xray-core
      run: |
        wget -q --show-progress -O xray.zip https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip
        rm -f xray LICENSE geoip.dat geosite.dat README.md || true
        unzip -o xray.zip
        chmod +x xray
        sudo mv xray /usr/local/bin/
        echo "Xray-core installed successfully"
    
    - name: Create directory structure
      run: |
        mkdir -p data/raw data/working_json data/working_url log
        mkdir -p main/v2ray_config_collector/data/unique/protocols
        mkdir -p main/data/working_json main/data/working_url main/log
        mkdir -p reports
        echo "Directory structure created"
    
    - name: Run config collector
      run: |
        cd main/v2ray_config_collector
        python main.py
        echo "Config collection completed"
    
    - name: Verify generated config files
      run: |
        echo "Generated config files:"
        ls -la main/v2ray_config_collector/data/unique/protocols/
        
        if [ ! -f "main/v2ray_config_collector/data/unique/protocols/shadowsocks_configs.json" ]; then
          echo "shadowsocks config file not found!"
          exit 1
        fi
        
        echo "File sizes:"
        wc -c main/v2ray_config_collector/data/unique/protocols/*.json || echo "No JSON files found"
    
    - name: Setup file paths for testing
      run: |
        echo "Setting up correct file paths..."
        cd main/module
        
        # Create the directories where tester will save files
        mkdir -p ../data/working_json ../data/working_url ../log
        
        if [ -f "../v2ray_config_collector/data/unique/protocols/shadowsocks_configs.json" ]; then
          echo "Found shadowsocks config at expected path"
          SS_FILE="../v2ray_config_collector/data/unique/protocols/shadowsocks_configs.json"
        else
          echo "shadowsocks config not found at expected path!"
          echo "Current directory: $(pwd)"
          echo "Looking for config files:"
          find ../.. -name "shadowsocks_configs.json" -type f 2>/dev/null || echo "No shadowsocks files found anywhere"
          exit 1
        fi
        
        if [ -f "../v2ray_config_collector/data/unique/protocols/vmess_configs.json" ]; then
          echo "Found vmess config at expected path"
          VMESS_FILE="../v2ray_config_collector/data/unique/protocols/vmess_configs.json"
        else
          echo "vmess config not found at expected path"
          VMESS_FILE=""
        fi
        
        if [ -f "../v2ray_config_collector/data/unique/protocols/vless_configs.json" ]; then
          echo "Found vless config at expected path"
          VLESS_FILE="../v2ray_config_collector/data/unique/protocols/vless_configs.json"
        else
          echo "vless config not found at expected path"
          VLESS_FILE=""
        fi
        
        echo "SS_FILE=$SS_FILE" >> $GITHUB_ENV
        echo "VMESS_FILE=$VMESS_FILE" >> $GITHUB_ENV
        echo "VLESS_FILE=$VLESS_FILE" >> $GITHUB_ENV
    
    - name: Test Shadowsocks configurations
      run: |
        cd main/module
        if [ -n "$SS_FILE" ] && [ -f "$SS_FILE" ]; then
          echo "Testing Shadowsocks configurations..."
          echo "Config file: $SS_FILE"
          echo "Config count: $(jq '.configs | length' "$SS_FILE" 2>/dev/null || echo "Unable to count")"
          
          python tester.py \
            --shadowsocks "$SS_FILE" \
            --xray-path /usr/local/bin/xray \
            --workers 200 \
            --timeout 10 \
            --batch-size 500
          
          echo "Shadowsocks tests completed"
        else
          echo "Shadowsocks config file not available: $SS_FILE"
          exit 1
        fi
    
    - name: Test VMess configurations
      run: |
        cd main/module
        if [ -n "$VMESS_FILE" ] && [ -f "$VMESS_FILE" ]; then
          echo "Testing VMess configurations..."
          echo "Config file: $VMESS_FILE"
          config_count=$(jq '.configs | length' "$VMESS_FILE" 2>/dev/null || echo "0")
          echo "Config count: $config_count"
          
          if [ "$config_count" -gt 0 ]; then
            python tester.py \
              --vmess "$VMESS_FILE" \
              --xray-path /usr/local/bin/xray \
              --workers 200 \
              --timeout 10 \
              --batch-size 500
              
            echo "VMess tests completed"
          else
            echo "Skipping VMess tests - no valid configs found in file"
          fi
        else
          echo "Skipping VMess tests - config file not available: $VMESS_FILE"
        fi
    
    - name: Test VLESS configurations
      run: |
        cd main/module
        if [ -n "$VLESS_FILE" ] && [ -f "$VLESS_FILE" ]; then
          echo "Testing VLESS configurations..."
          echo "Config file: $VLESS_FILE"
          config_count=$(jq '.configs | length' "$VLESS_FILE" 2>/dev/null || echo "0")
          echo "Config count: $config_count"
          
          if [ "$config_count" -gt 0 ]; then
            python tester.py \
              --vless "$VLESS_FILE" \
              --xray-path /usr/local/bin/xray \
              --workers 200 \
              --timeout 10 \
              --batch-size 500
              
            echo "VLESS tests completed"
          else
            echo "Skipping VLESS tests - no valid configs found in file"
          fi
        else
          echo "Skipping VLESS tests - config file not available: $VLESS_FILE"
        fi
    
    - name: Copy test results to root directories
      run: |
        echo "Copying test results to root directories..."
        
        # Copy from the exact paths where tester saves files
        if [ -d "main/data/working_json" ]; then
          cp -r main/data/working_json/* data/working_json/ 2>/dev/null || echo "No working_json files to copy"
        fi
        
        if [ -d "main/data/working_url" ]; then
          cp -r main/data/working_url/* data/working_url/ 2>/dev/null || echo "No working_url files to copy" 
        fi
        
        if [ -d "main/log" ]; then
          cp -r main/log/* log/ 2>/dev/null || echo "No log files to copy"
        fi
        
        echo "Results summary:"
        echo "Working JSON files:"
        ls -la data/working_json/ 2>/dev/null || echo "No JSON results"
        echo "Working URL files:"
        ls -la data/working_url/ 2>/dev/null || echo "No URL results"
        echo "Log files:"
        ls -la log/ 2>/dev/null || echo "No log files"
    
    - name: Generate test report
      run: |
        echo "Generating test report..."
        
        WORKING_SS=0
        WORKING_VLESS=0  
        WORKING_VMESS=0
        
        echo "Checking working config files..."
        
        # Count lines in files instead of JSON objects
        if [ -f "data/working_json/working_shadowsocks.txt" ]; then
          echo "Found shadowsocks results file"
          WORKING_SS=$(wc -l < data/working_json/working_shadowsocks.txt 2>/dev/null || echo "0")
          echo "Shadowsocks working configs: $WORKING_SS"
        else
          echo "No shadowsocks results file found"
          WORKING_SS=0
        fi
        
        if [ -f "data/working_json/working_vless.txt" ]; then
          echo "Found vless results file"
          WORKING_VLESS=$(wc -l < data/working_json/working_vless.txt 2>/dev/null || echo "0")
          echo "VLESS working configs: $WORKING_VLESS"
        else
          echo "No vless results file found"
          WORKING_VLESS=0
        fi
        
        if [ -f "data/working_json/working_vmess.txt" ]; then
          echo "Found vmess results file"
          WORKING_VMESS=$(wc -l < data/working_json/working_vmess.txt 2>/dev/null || echo "0")
          echo "VMess working configs: $WORKING_VMESS"
        else
          echo "No vmess results file found"
          WORKING_VMESS=0
        fi
        
        TOTAL_WORKING=$((WORKING_SS + WORKING_VLESS + WORKING_VMESS))
        
        echo "Total working configs: $TOTAL_WORKING"
        
        echo "WORKING_SS=$WORKING_SS" >> $GITHUB_ENV
        echo "WORKING_VLESS=$WORKING_VLESS" >> $GITHUB_ENV  
        echo "WORKING_VMESS=$WORKING_VMESS" >> $GITHUB_ENV
        echo "TOTAL_WORKING=$TOTAL_WORKING" >> $GITHUB_ENV
        
        mkdir -p reports
        
        echo "# Proxy Test Results" > reports/test_summary.md
        echo "**Date**: $(date +'%Y-%m-%d %H:%M:%S UTC')" >> reports/test_summary.md
        echo "" >> reports/test_summary.md
        echo "## Working Configurations" >> reports/test_summary.md
        echo "- Shadowsocks: $WORKING_SS" >> reports/test_summary.md
        echo "- VLESS: $WORKING_VLESS" >> reports/test_summary.md
        echo "- VMess: $WORKING_VMESS" >> reports/test_summary.md
        echo "" >> reports/test_summary.md
        echo "## Total Working: $TOTAL_WORKING" >> reports/test_summary.md
        echo "" >> reports/test_summary.md
        echo "## Test Details" >> reports/test_summary.md
        echo "- Last run: $(date)" >> reports/test_summary.md
        echo "- Workflow: Run Proxy Tests and Upload Results" >> reports/test_summary.md
        echo "- Run ID: $GITHUB_RUN_ID" >> reports/test_summary.md
        echo "- Commit: $GITHUB_SHA" >> reports/test_summary.md
        
        echo "Test report generated with $TOTAL_WORKING working configs"
    
    - name: Upload test results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: proxy-test-results
        path: |
          data/working_json/
          data/working_url/
          log/
          reports/
        if-no-files-found: warn
    
    - name: Upload test summary as artifact
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: reports/test_summary.md
        if-no-files-found: warn
    
    - name: Commit and push results to repository
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/ log/ reports/
        git commit -m "Auto-update: Test results (${{ env.TOTAL_WORKING }} working configs) - $(date +'%Y-%m-%d %H:%M')"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
